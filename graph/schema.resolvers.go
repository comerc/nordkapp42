package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"
	"nordkapp42/graph/model"
	"nordkapp42/pkg/jwt"
	"strconv"
	"strings"
	"time"

	"github.com/99designs/gqlgen/graphql/handler/transport"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/stdlib"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vikstrous/dataloadgen"
)

// Member is the resolver for the member field.
func (r *messageResolver) Member(ctx context.Context, obj *model.Message) (*model.Member, error) {
	loader := GetLoaders(ctx).MemberLoader
	if GetIsSubscription(ctx) {
		loader.Clear(obj.MemberID)
	}
	return loader.Load(ctx, obj.MemberID)
}

// Rooms is the resolver for the rooms field.
func (r *queryResolver) Rooms(ctx context.Context) ([]*model.Room, error) {
	db := GetDB(ctx)
	var rooms []*model.Room
	query := db.NewSelect().
		Column("rooms.*").
		Table("rooms").
		Join("JOIN room_members AS t").
		JoinOn("t.room_id = id").
		JoinOn("t.member_id = ?", GetMemberID(ctx))
	// if limit != nil {
	// 	query = query.Limit(*limit)
	// }
	// if offset != nil {
	// 	query = query.Offset(*offset)
	// }
	if err := query.Scan(ctx, &rooms); err != nil {
		return nil, err
	}
	return rooms, nil
}

// Props is the resolver for the props field.
func (r *roomResolver) Props(ctx context.Context, obj *model.Room) (*model.RoomProps, error) {
	var loader *dataloadgen.Loader[int, *model.RoomProps]
	if obj.Kind == model.RoomKindEnumChat {
		loader = GetLoaders(ctx).ChatRoomPropsLoader
	} else {
		loader = GetLoaders(ctx).CommonRoomPropsLoader
	}
	if GetIsSubscription(ctx) {
		loader.Clear(obj.ID)
	}
	return loader.Load(ctx, obj.ID)
}

// Messages is the resolver for the messages field.
func (r *roomResolver) Messages(ctx context.Context, obj *model.Room) ([]*model.Message, error) {
	loader := GetLoaders(ctx).ManyMessagesLoader
	if GetIsSubscription(ctx) {
		loader.Clear(obj.ID)
	}
	return loader.Load(ctx, obj.ID)
}

// Rooms is the resolver for the rooms field.
func (r *subscriptionResolver) Rooms(ctx context.Context) (<-chan []*model.Room, error) {
	ch := make(chan []*model.Room)
	go func() {
		defer close(ch)
		// conn
		db := GetDB(ctx)
		conn, err := db.Conn(ctx)
		if err != nil {
			transport.AddSubscriptionError(ctx, gqlerror.Errorf("conn: %s", err))
			return
		}
		defer conn.Close()
		// pgxConn
		var pgxConn *pgx.Conn
		if err := conn.Raw(func(driverConn any) error {
			pgxConn = driverConn.(*stdlib.Conn).Conn()
			return nil
		}); err != nil {
			transport.AddSubscriptionError(ctx, gqlerror.Errorf("pgxConn: %s", err))
			return
		}
		// TODO: custom notifications for loader.LoadAll
		// var notifications []*pgconn.Notification
		// config := pgxConn.Config()
		// config.OnNotification = func(_ *pgconn.PgConn, n *pgconn.Notification) {
		// 	fmt.Println("OnNotification")
		// 	notifications = append(notifications, n)
		// }
		// pgxConn, err = pgx.ConnectConfig(ctx, config)
		// if err != nil {
		// 	transport.AddSubscriptionError(ctx, gqlerror.Errorf("ConnectConfig: %s", err))
		// 	return
		// }
		// listen
		// _, err = pgxConn.Exec(ctx, `LISTEN "rooms:updated"`)
		// _, err = conn.ExecContext(ctx, "CREATE TEMP TABLE IF NOT EXISTS session_vars (member_id INT); INSERT INTO session_vars (member_id) VALUES (?)", GetMemberID(ctx))
		// if err != nil {
		// 	transport.AddSubscriptionError(ctx, gqlerror.Errorf("%s", err))
		// 	return
		// }
		if _, err := conn.ExecContext(ctx, `LISTEN "rooms:updated"`); err != nil {
			transport.AddSubscriptionError(ctx, gqlerror.Errorf("%s", err))
			return
		}
		// notification loop
		for {
			fmt.Println("notification")
			notification, err := pgxConn.WaitForNotification(ctx)
			if err != nil {
				transport.AddSubscriptionError(ctx, gqlerror.Errorf("Error waiting for notification: %s", err))
				return
			}
			fmt.Println("PID:", notification.PID, "Channel:", notification.Channel, "Payload:", notification.Payload)
			splitted := strings.Split(notification.Payload, ", ")
			var keys = make([]int, len(splitted))
			for i, s := range splitted {
				num, _ := strconv.Atoi(s)
				keys[i] = num
			}
			// roomID, err := strconv.Atoi(notification.Payload)
			// if err != nil {
			// 	transport.AddSubscriptionError(ctx, gqlerror.Errorf("Invalid roomID: %s", err))
			// 	return
			// }
			if jwt.GetPayload(ctx).IsExpired() {
				transport.AddSubscriptionError(ctx, gqlerror.Errorf("JWT was expired"))
				return
			}
			loader := GetLoaders(ctx).MemberRoomLoader
			for _, key := range keys {
				loader.Clear(key)
			}
			rooms, err := loader.LoadAll(ctx, keys)
			if len(rooms) == 0 && err != nil {
				transport.AddSubscriptionError(ctx, gqlerror.Errorf("MemberRoomLoader: %s", err))
				return
			}
			var res []*model.Room
			for _, room := range rooms {
				if room != nil {
					res = append(res, room)
				}
			}
			if len(res) > 0 {
				ch <- res
			}
			// TODO: custom notifications for loader.LoadAll
			// err := pgxConn.PgConn().WaitForNotification(ctx)
			// if err != nil {
			// 	transport.AddSubscriptionError(ctx, gqlerror.Errorf("Error waiting for notification: %s", err))
			// 	return
			// }
			// for {
			// 	if len(notifications) == 0 {
			// 		break
			// 	}
			// 	n := notifications[0]
			// 	notifications = notifications[1:]
			// 	fmt.Println("PID:", n.PID, "Channel:", n.Channel, "Payload:", n.Payload)
			// }
		}
	}()
	return ch, nil
}

// CurrentTime is the resolver for the currentTime field.
func (r *subscriptionResolver) CurrentTime(ctx context.Context) (<-chan *model.Time, error) {
	// First you'll need to `make()` your channel. Use your type here!
	ch := make(chan *model.Time)
	// You can (and probably should) handle your channels in a central place outside of `schema.resolvers.go`.
	// For this example we'll simply use a Goroutine with a simple loop.
	go func() {
		// Handle deregistration of the channel here. Note the `defer`
		defer close(ch)
		flag := true
		for {
			// TODO: How to add path to errors?
			// https://github.com/99designs/gqlgen/issues/2474#issuecomment-2017874950
			// https://github.com/99designs/gqlgen/issues/1118#issuecomment-2019817065
			// if jwt.GetPayload(ctx).IsExpired() {
			// 	transport.AddSubscriptionError(ctx, gqlerror.Errorf("JWT was expired"))
			// 	return
			// }
			//fmt.Println(GetMemberID(ctx))
			// In our example we'll send the current time every second.
			time.Sleep(1 * time.Second)
			if flag {
				fmt.Println("Tick")
			} else {
				fmt.Println("Tock")
			}
			flag = !flag
			// Prepare your object.
			currentTime := time.Now()
			t := &model.Time{
				UnixTime:  int(currentTime.Unix()),
				TimeStamp: currentTime.Format(time.RFC3339),
			}
			// The subscription may have got closed due to the client disconnecting.
			// Hence we do send in a select block with a check for context cancellation.
			// This avoids goroutine getting blocked forever or panicking,
			select {
			case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
				fmt.Println("Subscription Closed")
				// Handle deregistration of the channel here. `close(ch)`
				return // Remember to return to end the routine.
			case ch <- t: // This is the actual send.
				// Our message went through, do nothing
			}
		}
	}()
	// We return the channel and no error.
	return ch, nil
}

// Message returns MessageResolver implementation.
func (r *Resolver) Message() MessageResolver { return &messageResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Room returns RoomResolver implementation.
func (r *Resolver) Room() RoomResolver { return &roomResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type messageResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type roomResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
