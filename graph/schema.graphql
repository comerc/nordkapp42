type Query {
  rooms: [Room!]! @auth
}

type Subscription {
  rooms: [Room!]! @auth
}

type Member {
  createdAt: timestamptz!
  id: Int!
  name: String!
  updatedAt: timestamptz!
}

type Message {
  createdAt: timestamptz!
  id: Int!
  isRead: Boolean!
  memberId: Int!
  roomId: Int!
  text: String!
  updatedAt: timestamptz!
  member: Member! @goField(forceResolver: true)
}

type Room {
  id: Int!
  createdAt: timestamptz!
  updatedAt: timestamptz!
  props: RoomProps! @goField(forceResolver: true)
  kind: RoomKindEnum!
  messages: [Message!]! @goField(forceResolver: true)

}

type RoomProps {
  name: String!
}

scalar timestamptz

enum RoomKindEnum {
  CHAT
  PRIVATE_CHANNEL
  PRIVATE_GROUP
  PUBLIC_CHANNEL
  PUBLIC_GROUP
}

directive @goField(
    forceResolver: Boolean
    name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @auth on FIELD_DEFINITION