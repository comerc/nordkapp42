type Query {
  # searchRooms # TODO: отдаёт любые публичные комнаты и личные чаты по строке поиска
  # getRoomByPK # TODO: отдаёт любую публичную комнату или личный чат по ID
  rooms: [Room!]! @auth # отдаёт только свои комнаты и личные чаты
}

type Subscription {
  rooms: [Room!]! @auth
  currentTime: Time! @auth
# TODO: https://github.com/99designs/gqlgen/issues/774#issuecomment-1022246731
# refreshToken($token)
}

type Member {
  createdAt: timestamptz!
  id: Int!
  name: String!
  updatedAt: timestamptz!
}

type Message {
  createdAt: timestamptz!
  id: Int!
  isRead: Boolean!
  memberId: Int!
  roomId: Int!
  text: String!
  updatedAt: timestamptz!
  member: Member! @goField(forceResolver: true)
}

type Room {
  id: Int!
  createdAt: timestamptz!
  updatedAt: timestamptz!
  props: RoomProps! @goField(forceResolver: true)
  kind: RoomKindEnum!
  messages: [Message!]! @goField(forceResolver: true)
}

type RoomProps {
  name: String!
}

type Time {
  unixTime: Int!
  timeStamp: String!
}

scalar timestamptz

enum RoomKindEnum {
  CHAT
  PRIVATE_CHANNEL
  PRIVATE_GROUP
  PUBLIC_CHANNEL
  PUBLIC_GROUP
}

directive @goField(
    forceResolver: Boolean
    name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

directive @auth on FIELD_DEFINITION